
============================================================================== Step : 13 (Checkout Component : Imporve) ===================================================================
# add spinner while creating the order . => https://lukehaas.me/projects/css-loaders/
    => change the bg,color.

# create a folder : Components > Spinner > Spinner.js , Spinner.css | for creating spinner component . 

# import the Spinner component to the Checkout Component . 

# in state , declare => 'isLoading : false' . handleSubmit function => isLoading :true . 
    => when get the axios response then set =>  isLoading :false.
    
# in render(){

let form = 'Total form code ' ; 

return (
    {this.state.isLoading ? <Spinner/> : form}
); 
}

# after submit the place order pop up a modal => in state isModalOpen :fasle , modalMsg:'',

# if order placed successfull: reset the redux (value : ingredients,totalAmount etc). 
    => actionType.jsx => export const RESET_INGREDIENT = '';
    => actionCreator.jsx => 
    ------------------------
    export const resetIngredient = () =>{
        return {
            type: actionTypes.RESET_INGREDIENT
        }
    }
    => reducer.jsx=> 
    -----------------
    case actionTypes.RESET_INGREDIENT : 
        return {
            ...state,
              ingredients: [
                    { type: "salad", amount: 0 },
                    { type: "cheese", amount: 0 },
                    { type: "meat", amount: 0 },
                  ],
                  totalPrice: 80,
                  purchaseable: false,
            
        }
        
    => call the RESET_INGREDIENT function by mapDispatchToProps 
    
# ****If we want to use any function then we can call it in Class Component => this.props.function_name_from_actionCreators.jsx

#Spinner.jsx=> 
---------------
import React from 'react'
import "./Spinner.css"


const Spinner = () => {
  return (
    <div className='loader d-flex justify-content-center mt-4'>
       <p className='text-center text-dark'> Loading...</p>
    </div>
  )
}

export default Spinner


#actionTypes.jsx=>
------------------
export const ADD_INGREDIENT = "ADD_INGREDIENT";
export const REMOVE_INGREDIENT = "REMOVE_INGREDIENT";
export const UPDATE_PURCHASEABLE = "UPDATE_PURCHASEABLE";
export const RESET_INGREDIENT = "RESET_INGREDIENT";

#actionCreators.jsx=> 
---------------------
import * as actionTypes from './actionTypes'

export const addIngredient = (igtype) => {
    return {
        type: actionTypes.ADD_INGREDIENT,
        payload: igtype
    };
};

export const removeIngredient = (igtype) => {
    return {
        type: actionTypes.REMOVE_INGREDIENT,
        payload: igtype
    };
};

export const updatePurchaseable = (igtype) => {
    return {
        type: actionTypes.UPDATE_PURCHASEABLE,
        payload: igtype
    };
};

export const resetIngredient = () => {
    return {
        type: actionTypes.RESET_INGREDIENT,
       
    };
};

#reducer.jsx=> 
---------------
import * as actionTypes from "./actionTypes";

const INGREDIENT_PRICES = {
  salad: 10,
  cheese: 20,
  meat: 30,
};

const INITIAL_STATE = {
  ingredients: [
    { type: "salad", amount: 0 },
    { type: "cheese", amount: 0 },
    { type: "meat", amount: 0 },
  ],
  totalPrice: 80,
  purchaseable: false,
};

export const reducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case actionTypes.ADD_INGREDIENT: {
      // Create a new array to ensure immutability
      const updatedIngredients = state.ingredients.map(item => {
        if (item.type === action.payload) {
          return { ...item, amount: item.amount + 1 };
        }
        return item;
      });
      
      return {
        ...state,
        ingredients: updatedIngredients,
        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.payload]
      };
    }

    case actionTypes.REMOVE_INGREDIENT: {
      // Find the ingredient to check if amount > 0
      const ingredient = state.ingredients.find(item => item.type === action.payload);
      
      // If ingredient doesn't exist or amount is already 0, return current state
      if (!ingredient || ingredient.amount <= 0) {
        return state;
      }
      
      // Create a new array with updated amounts
      const updatedIngredients = state.ingredients.map(item => {
        if (item.type === action.payload) {
          return { ...item, amount: item.amount - 1 };
        }
        return item;
      });
      
      return {
        ...state,
        ingredients: updatedIngredients,
        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.payload]
      };
    }

    case actionTypes.UPDATE_PURCHASEABLE: {
      // Calculate if we have at least one ingredient
      const sum = state.ingredients.reduce((sum, item) => {
        return sum + item.amount;
      }, 0);
      
      return {
        ...state,
        purchaseable: sum > 0 // return ture : if sum > 0, we have at least one ingredient
      };
    }

    case actionTypes.RESET_INGREDIENT: {
      return {
        ...state,
        ingredients: [
          { type: "salad", amount: 0 },
          { type: "cheese", amount: 0 },
          { type: "meat", amount: 0 },
        ],
        totalPrice: 80,
        purchaseable: false,
      };
    }

    default:
      return state;
  }
};




#Checkout.jsx=> 
-----------------
import { Button, Modal, ModalBody, ModalFooter, Spinner } from "reactstrap";
import React from "react";
import { connect } from "react-redux";
import Ingredient from "../../Ingredient/Ingredient";

import { NavLink } from "react-router-dom";
import axios from "axios";
import { resetIngredient } from "../../../../redux/actionCreators";

const mapStateToProps = (state) => {
  console.log(state);
  return {
    ingredients: state.ingredients,
    totalPrice: state.totalPrice,
    purchaseable: state.purchaseable,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    resetIngredient: () => dispatch(resetIngredient()),
  };
};

class Checkout extends React.Component {
  state = {
    values: {
      deliveryAddress: "",
      phone: "",
      paymentType: "Cash On Delivery ",
    },

    isLoading: false,
    isModalOpen: false,
    modalMsg: "",
  };

  inputChangerHandler = (e) => {
    // Correctly update the state using setState
    this.setState({
      values: {
        ...this.state.values,
        [e.target.name]: e.target.value,
      },
    });
  };

  submitHandler = () => {
    this.setState({
      isLoading: true,
    });

    const order = {
      ingredients: this.props.ingredients,
      totalPrice: this.props.totalPrice,
      paymentType: this.state.values.paymentType,
      phone: this.state.values.phone,
      deliveryAddress: this.state.values.deliveryAddress,
      orderTime: new Date().toLocaleString(),
    };

    axios
      .post(
        "https://bbuilder-7276c-default-rtdb.firebaseio.com/orders.json",
        order
      )
      .then((response) => {
        console.log(response);

        if (response.status === 200) {
          this.setState({
            isLoading: false,
            isModalOpen: true,
            modalMsg: "Order placed Successfully!",
          });

          //for reset the redux value : ___________________
          this.props.resetIngredient();
        } else {
          this.setState({
            isLoading: false,
            isModalOpen: true,
            modalMsg: "SomeThing Went Wrong!",
          });
        }
      })
      .catch((error) => {
        console.log(error);
        this.setState({
          isLoading: false,
          isModalOpen: true,
          modalMsg: "SomeThing Went Wrong!",
        });
      });

    console.log(order);
  };

  render() {
    let form = (
      <div>
        <h4>Price : {this.props.totalPrice}</h4>
        <form>
          <textarea
            name="deliveryAddress"
            value={this.state.values.deliveryAddress}
            className="form-control"
            placeholder="Delivery Address"
            onChange={(e) => this.inputChangerHandler(e)}></textarea>
          <br />
          <input
            name="phone"
            value={this.state.values.phone} // Fixed: Use this.state.values.phone
            className="form-control"
            placeholder="Phone"
            onChange={(e) => this.inputChangerHandler(e)}
          />
          <br />
          <select
            name="paymentType"
            value={this.state.values.paymentType}
            className="form-control"
            onChange={(e) => this.inputChangerHandler(e)} // Added onChange for select
          >
            <option value="Cash On Delivery ">Cash On Delivery</option>
            <option value="Bkash">Bkash</option>
          </select>
          <br />
          <Button className="bg-info m-2" onClick={this.submitHandler}>
            Place Order
          </Button>

          <NavLink to="/">
            <Button className="bg-info m-2">Cancel</Button>
          </NavLink>
        </form>
      </div>
    );

    return (
      <div className="d-flex justify-content-center">
        {this.state.isLoading ? <Spinner /> : form}
        <Modal isOpen={this.state.isModalOpen}>
          <ModalBody>
            <p>{this.state.modalMsg}</p>
          </ModalBody>

          <ModalFooter>
            <NavLink to="/">
              <Button
                color="secondary"
                onClick={() => this.setState({ isModalOpen: false })}>
                Close
              </Button>
            </NavLink>
          </ModalFooter>
        </Modal>
      </div>
    );
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Checkout);

=============================== Other Component is unchanged ==================================
